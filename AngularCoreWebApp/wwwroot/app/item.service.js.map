{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","doItemsGet","getMostVieved","getRandom","methodName","url","get","map","res","json","catch","handleError","id","Error","add","item","post","JSON","stringify","getRequestOptions","response","update","Id","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"0/BAOAA,YAAA,WAEI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAkB,aAsE9B,MApEIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,MAAOJ,MAAKK,WAAW,YAAaD,MAGxCN,YAAAI,UAAAI,cAAA,SAAcF,KACV,MAAOJ,MAAKK,WAAW,gBAAiBD,MAG5CN,YAAAI,UAAAK,UAAA,SAAUH,KACN,MAAOJ,MAAKK,WAAW,YAAaD,MAGhCN,YAAAI,UAAAG,WAAR,SAAmBG,WAAoBJ,KACnC,GAAIK,KAAMT,KAAKC,QAAUO,WAAa,GAKtC,OAJW,OAAPJ,MACAK,KAAOL,KAGJJ,KAAKD,KAAKW,IAAID,KAChBE,IAAI,SAAAC,KAAO,MAAAA,KAAIC,SACfC,MAAMd,KAAKe,cAGpBjB,YAAAI,UAAAQ,IAAA,SAAIM,IACA,GAAU,MAANA,GACA,KAAM,IAAIC,OAAM,iBAGpB,IAAIR,KAAMT,KAAKC,QAAUe,EAEzB,OAAOhB,MAAKD,KAAKW,IAAID,KAChBE,IAAI,SAAAC,KAAO,MAAMA,KAAIC,SACrBC,MAAMd,KAAKe,cAGpBjB,YAAAI,UAAAgB,IAAA,SAAIC,MAEA,GAAIV,KAAMT,KAAKC,OACf,OAAOD,MAAKD,KAAKqB,KAAKX,IAAKY,KAAKC,UAAUH,MAAOnB,KAAKuB,qBACjDZ,IAAI,SAAAa,UAAY,MAAAA,UAASX,SACzBC,MAAMd,KAAKe,cAIpBjB,YAAAI,UAAAuB,OAAA,SAAON,MACH,GAAIV,KAAMT,KAAKC,QAAUkB,KAAKO,EAC9B,OAAO1B,MAAKD,KAAK4B,IAAIlB,IAAKY,KAAKC,UAAUH,MAAOnB,KAAKuB,qBAChDZ,IAAI,SAAAa,UAAY,MAAAA,UAASX,SACzBC,MAAMd,KAAKe,cAGpBjB,YAAAI,UAAA0B,OAAA,SAAOZ,IACH,GAAIP,KAAMT,KAAKC,QAAUe,EAEzB,OAAOhB,MAAKD,KAAK6B,OAAOnB,KACnBK,MAAMd,KAAKe,cAGZjB,YAAAI,UAAAqB,kBAAR,WACI,MAAO,IAAIM,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SAAUC,eAAgB,wBAIvCnC,YAAAI,UAAAa,YAAR,SAAoBmB,OAEhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMrB,OAAOqB,OAAS,iBAzEtDpC,YAAAyC,YAACC,OAAAC,qFACDC,UAAA,cAAA5C","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {  Response, Headers, RequestOptions } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\nimport { AuthHttp } from './auth.http';\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    private baseUrl: string = \"api/items/\";\r\n\r\n    getLatest(num?: number) {\r\n        return this.doItemsGet(\"getlatest\", num);\r\n    }\r\n\r\n    getMostVieved(num?: number) {\r\n        return this.doItemsGet(\"getmostviewed\", num);\r\n    }\r\n\r\n    getRandom(num?: number) {\r\n        return this.doItemsGet(\"getrandom\", num);\r\n    }\r\n\r\n    private doItemsGet(methodName: string, num?: number) {\r\n        var url = this.baseUrl + methodName + \"/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n\r\n        return this.http.get(url)\r\n            .map(res => res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    get(id: number) {\r\n        if (id == null) {\r\n            throw new Error(\"id is required\");\r\n        }\r\n\r\n        var url = this.baseUrl + id;\r\n\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    add(item: Item) {\r\n\r\n        var url = this.baseUrl;\r\n        return this.http.post(url, JSON.stringify(item), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError)\r\n            ;\r\n    }\r\n\r\n    update(item: Item) {\r\n        var url = this.baseUrl + item.Id;\r\n        return this.http.put(url, JSON.stringify(item), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    delete(id: number) {\r\n        var url = this.baseUrl + id;\r\n\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({ \"Content-Type\": \"application/json\" })\r\n        });\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"],"sourceRoot":"/source/"}
{"version":3,"sources":["auth.service.ts"],"names":["AuthService","http","this","authKey","tokenUrl","prototype","login","username","password","_this","data","client_id","grant_type","scope","post","toUrlEncodedString","http_1","RequestOptions","headers","Headers","Content-Type","map","response","auth","json","console","log","setAuth","logout","catch","err","Observable_1","Observable","throw","body","key","length","encodeURIComponent","localStorage","setItem","JSON","stringify","removeItem","getAuth","getItem","parse","isLoggedIn","get","add","user","update","put","__decorate","core_1","Injectable","exports_1"],"mappings":"0/BAUAA,YAAA,WAKI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAHZC,KAAAC,QAAU,OACVD,KAAAE,SAAW,qBAsGvB,MAlGIJ,aAAAK,UAAAC,MAAA,SAAMC,SAAkBC,UAAxB,GAAAC,OAAAP,KACQQ,MACAH,SAAUA,SACVC,SAAUA,SACVG,UAAW,eACXC,WAAY,WACZC,MAAO,+BAGX,OAAOX,MAAKD,KAAKa,KAAKZ,KAAKE,SACvBJ,YAAYe,mBAAmBL,MAC/B,GAAIM,QAAAC,gBACAC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,yCAGvBC,IAAI,SAAAC,UACD,GAAIC,MAAOD,SAASE,MAGpB,OAFAC,SAAQC,IAAI,8BAAgCH,MAC5Cd,MAAKkB,QAAQJ,MACNA,QAInBvB,YAAAK,UAAAuB,OAAA,WAAA,GAAAnB,OAAAP,IACI,OAAOA,MAAKD,KAAKa,KACb,sBACA,MACCO,IAAI,SAAAC,UAED,MADAb,OAAKkB,QAAQ,OACN,IAEVE,MAAM,SAAAC,KACH,MAAOC,cAAAC,WAAWC,MAAMH,QAI7B9B,YAAAe,mBAAP,SAA0BL,MACtB,GAAIwB,MAAe,EACnB,KAAK,GAAIC,OAAOzB,MACRwB,KAAKE,SACLF,MAAQ,KAEZA,MAAQC,IAAM,IACdD,MAAQG,mBAAmB3B,KAAKyB,KAGpC,OAAOD,OAGXlC,YAAAK,UAAAsB,QAAA,SAAQJ,MAOJ,MANIA,MACAe,aAAaC,QAAQrC,KAAKC,QAASqC,KAAKC,UAAUlB,OAElDe,aAAaI,WAAWxC,KAAKC,UAG1B,GAGXH,YAAAK,UAAAsC,QAAA,WAEI,GAAIpB,MAAOe,aAAaM,QAAQ1C,KAAKC,QACrC,OAAIoB,MACOiB,KAAKK,MAAMtB,MAGf,MAGXvB,YAAAK,UAAAyC,WAAA,WACI,MAA6C,OAAtCR,aAAaM,QAAQ1C,KAAKC,UAGrCH,YAAAK,UAAA0C,IAAA,WACI,MAAO7C,MAAKD,KAAK8C,IAAI,gBAChB1B,IAAI,SAAAC,UAAY,MAAAA,UAASE,UAGlCxB,YAAAK,UAAA2C,IAAA,SAAIC,MACA,MAAO/C,MAAKD,KAAKa,KAAK,eAAgB0B,KAAKC,UAAUQ,MAAO,GAAIjC,QAAAC,gBAC5DC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAGnBC,IAAI,SAAAC,UAAY,MAAAA,UAASE,UAIlCxB,YAAAK,UAAA6C,OAAA,SAAOD,MACH,MAAO/C,MAAKD,KAAKkD,IAAI,eAAgBX,KAAKC,UAAUQ,MAAO,GAAIjC,QAAAC,gBACnDC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAGvBC,IAAI,SAAAC,UAAY,MAAAA,UAASE,UAvG1CxB,YAAAoD,YAACC,OAAAC,qFACDC,UAAA,cAAAvD","file":"auth.service.js","sourcesContent":["import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { Headers, Response, RequestOptions } from \"@angular/http\";\r\n\r\nimport { AuthHttp } from './auth.http';\r\nimport { User } from './user';\r\n\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n    private authKey = \"auth\";\r\n    private tokenUrl = \"/api/connect/token\";\r\n\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    login(username: string, password: string): any {\r\n        var data = {\r\n            username: username,\r\n            password: password,\r\n            client_id: \"OpenGameList\",\r\n            grant_type: \"password\",\r\n            scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.http.post(this.tokenUrl,\r\n            AuthService.toUrlEncodedString(data),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                })\r\n            }))\r\n            .map(response => {\r\n                var auth = response.json();\r\n                console.log(\"received auth json object: \" + auth);\r\n                this.setAuth(auth);\r\n                return auth;\r\n            });\r\n    }\r\n\r\n    logout(): any {\r\n        return this.http.post(\r\n            \"api/Accounts/Logout\",\r\n            null)\r\n            .map(response => {\r\n                this.setAuth(null);\r\n                return true;\r\n            })\r\n            .catch(err => {\r\n                return Observable.throw(err);\r\n            });\r\n    }\r\n\r\n    static toUrlEncodedString(data: any): string {\r\n        var body: string = \"\";\r\n        for (var key in data) {\r\n            if (body.length) {\r\n                body += \"&\";\r\n            }\r\n            body += key + \"=\";\r\n            body += encodeURIComponent(data[key]);\r\n        }\r\n\r\n        return body;\r\n    }\r\n\r\n    setAuth(auth: any): boolean {\r\n        if (auth) {\r\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\r\n        } else {\r\n            localStorage.removeItem(this.authKey);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    getAuth(): any {\r\n\r\n        var auth = localStorage.getItem(this.authKey);\r\n        if (auth) {\r\n            return JSON.parse(auth);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return localStorage.getItem(this.authKey) != null;\r\n    }\r\n\r\n    get() {\r\n        return this.http.get(\"api/accounts\")\r\n            .map(response => response.json());\r\n    }\r\n\r\n    add(user: User) {\r\n        return this.http.post(\"api/accounts\", JSON.stringify(user), new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        }))\r\n            .map(response => response.json())\r\n            ;\r\n    }\r\n\r\n    update(user: User) {\r\n        return this.http.put(\"api/accounts\", JSON.stringify(user), new RequestOptions({\r\n                    headers: new Headers({\r\n                        \"Content-Type\": \"application/json\"\r\n                    })\r\n                }))\r\n                .map(response => response.json())\r\n            ;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["user-edit-component.ts"],"names":["UserEditComponent","fb","router","authService","activatedRoute","this","title","userForm","errorMessage","isRegister","snapshot","url","path","isLoggedIn","navigate","prototype","ngOnInit","_this","group","username","forms_1","Validators","required","pattern","email","password","minLength","passwordConfirm","displayName","validator","compareValidator","addControl","FormControl","find","clearValidators","setValidators","get","subscribe","user","setValue","UserName","Email","DisplayName","fc1","fc2","controls","value","compareFailed","onSubmit","add","data","error","login","err","console","log","user_1","User","passwordNew","update","__decorate","core_1","Component","selector","template","exports_1"],"mappings":"wjCA2EAA,kBAAA,WAMI,QAAAA,mBAAoBC,GAAyBC,OAAwBC,YAAkCC,gBAAnFC,KAAAJ,GAAAA,GAAyBI,KAAAH,OAAAA,OAAwBG,KAAAF,YAAAA,YAAkCE,KAAAD,eAAAA,eALvGC,KAAAC,MAAQ,wBACRD,KAAAE,SAAsB,KACtBF,KAAAG,aAAe,KAIXH,KAAKI,WAAsD,aAAxCL,eAAeM,SAASC,IAAI,GAAGC,MAC7CP,KAAKI,YAAcJ,KAAKF,YAAYU,eAChCR,KAAKI,aAAeJ,KAAKF,YAAYU,eAC1CR,KAAKH,OAAOY,UAAU,KAErBT,KAAKI,aACNJ,KAAKC,MAAQ,gBA+HzB,MA3HIN,mBAAAe,UAAAC,SAAA,WAAA,GAAAC,OAAAZ,IAmCI,IAlCAA,KAAKE,SAAWF,KAAKJ,GAAGiB,OAEhBC,UACI,IACIC,QAAAC,WAAWC,SACXF,QAAAC,WAAWE,QAAQ,kBAG3BC,OACI,IACIJ,QAAAC,WAAWC,SACXF,QAAAC,WAAWE,QACP,yIAGZE,UACI,IACIL,QAAAC,WAAWC,SACXF,QAAAC,WAAWK,UAAU,KAG7BC,iBACI,IACIP,QAAAC,WAAWC,SACXF,QAAAC,WAAWK,UAAU,KAG7BE,aAAc,GAAI,QAGlBC,UAAWxB,KAAKyB,iBAAiB,WAAY,sBAIhDzB,KAAKI,WAAY,CAClBJ,KAAKE,SAASwB,WAAW,kBAAkB,GAAIX,SAAAY,YAAY,GAAIZ,QAAAC,WAAWC,UAC1E,IAAIG,UAAWpB,KAAKE,SAAS0B,KAAK,WAClCR,UAASS,kBACTT,SAASU,cAAcf,QAAAC,WAAWK,UAAU,GAC5C,IAAIC,iBAAkBtB,KAAKE,SAAS0B,KAAK,kBACzCN,iBAAgBO,kBAChBP,gBAAgBQ,cAAcf,QAAAC,WAAWK,UAAU,IAEnDrB,KAAKF,YAAYiC,MAAMC,UACnB,SAAAC,MACIrB,MAAKV,SAAS0B,KAAK,YAAYM,SAASD,KAAKE,UAC7CvB,MAAKV,SAAS0B,KAAK,SAASM,SAASD,KAAKG,OAC1CxB,MAAKV,SAAS0B,KAAK,eAAeM,SAASD,KAAKI,iBAMhE1C,kBAAAe,UAAAe,iBAAA,SAAiBa,IAAaC,KAC1B,MAAO,UAAC1B,OACJ,GAAIO,UAAWP,MAAM2B,SAASF,KAC1BhB,gBAAkBT,MAAM2B,SAASD,IACrC,OAAInB,UAASqB,QAAUnB,gBAAgBmB,MAC5B,MAEFC,eAAe,KAIhC/C,kBAAAe,UAAAiC,SAAA,WAAA,GAAA/B,OAAAZ,IACI,IAAIA,KAAKI,WACLJ,KAAKF,YAAY8C,IAAI5C,KAAKE,SAASuC,OAC9BT,UAAU,SAACa,MACU,MAAdA,KAAKC,OAELlC,MAAKT,aAAe,KACpBS,MAAKd,YAAYiD,MACbnC,MAAKV,SAASuC,MAAM3B,SACpBF,MAAKV,SAASuC,MAAMrB,UACnBY,UAAU,SAACa,MAERjC,MAAKT,aAAe,KACpBS,MAAKf,OAAOY,UAAU,MAE1B,SAACuC,KACGC,QAAQC,IAAIF,KAEZpC,MAAKT,aACD,6CAIZS,MAAKT,aAAe0C,KAAKC,MACzBG,QAAQC,IAAItC,MAAKT,gBAGzB,SAAC6C,KAEGpC,MAAKT,aAAe6C,IACpBC,QAAQC,IAAItC,MAAKT,oBAEtB,CACH,GAAI8B,MAAO,GAAIkB,QAAAC,KACXpD,KAAKE,SAASuC,MAAM3B,SACpBd,KAAKE,SAASuC,MAAMrB,SACpBpB,KAAKE,SAASuC,MAAMY,YACpBrD,KAAKE,SAASuC,MAAMtB,MACpBnB,KAAKE,SAASuC,MAAMlB,YACxBvB,MAAKF,YAAYwD,OAAOrB,MACnBD,UAAU,SAACa,MACU,MAAdA,KAAKC,OAELlC,MAAKT,aAAe,KACpBS,MAAKf,OAAOY,UAAU,OAGtBG,MAAKT,aAAe0C,KAAKC,MACzBG,QAAQC,IAAItC,MAAKT,gBAGzB,SAAC6C,KAEGpC,MAAKT,aAAe6C,IACpBC,QAAQC,IAAItC,MAAKT,kBA7MrCR,kBAAA4D,YAACC,OAAAC,WACGC,SAAU,YACVC,SAAU,w9HAmEdC,UAAA,oBAAAjE","file":"user-edit-component.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { User } from \"./user\";\r\n\r\n@Component({\r\n    selector: \"user-edit\",\r\n    template: `\r\n<div class=\"user-container\">\r\n    <form class=\"form-user\" [formGroup]=\"userForm\" (submit)=\"onSubmit()\">\r\n        <h2 class=\"form-user-heading\">{{title}}</h2>\r\n        <div class=\"form-group\">\r\n            <input [disabled]=\"!this.isRegister\" formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Choose an Username\" autofocus />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.username.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.username.valid && !this.userForm.controls.username.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Type your e-mail address\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.email.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.email.valid && !this.userForm.controls.email.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div *ngIf=\"!this.isRegister\" class=\"form-group\">\r\n            <input formControlName=\"passwordCurrent\" type=\"password\" class=\"form-control\" placeholder=\"Current Password\" />\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.passwordCurrent.valid\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                required\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Choose a Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"passwordConfirm\" type=\"password\" class=\"form-control\" placeholder=\"Confirm your Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.password.pristine && !this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"(!this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.passwordConfirm.pristine) || this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"displayName\" type=\"text\" class=\"form-control\" placeholder=\"Choose a Display Name\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"submit\" class=\"btn btn-primary btn-block\" [disabled]=\"!userForm.valid\" value=\"{{this.isRegister ? 'Register' : 'Save'}}\" />\r\n        </div>\r\n    </form>\r\n</div>\r\n    `\r\n})\r\n\r\n\r\nexport class UserEditComponent implements OnInit{\r\n    title = \"New user registration\";\r\n    userForm: FormGroup = null;\r\n    errorMessage = null;\r\n    isRegister: boolean;\r\n\r\n    constructor(private fb: FormBuilder, private router: Router, private authService: AuthService, private activatedRoute: ActivatedRoute) {\r\n        this.isRegister = (activatedRoute.snapshot.url[0].path === \"register\");\r\n        if ((this.isRegister && this.authService.isLoggedIn())\r\n            || (!this.isRegister && !this.authService.isLoggedIn())) {\r\n            this.router.navigate([\"\"]);\r\n        }\r\n        if (!this.isRegister) {\r\n            this.title = \"Edit account\";\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.userForm = this.fb.group(\r\n            {\r\n                username: [\r\n                    \"\", [\r\n                        Validators.required,\r\n                        Validators.pattern(\"[a-zA-Z0-9]+\")\r\n                    ]\r\n                ],\r\n                email: [\r\n                    \"\", [\r\n                        Validators.required,\r\n                        Validators.pattern(\r\n                            \"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")\r\n                    ]\r\n                ],\r\n                password: [\r\n                    \"\", [\r\n                        Validators.required,\r\n                        Validators.minLength(6)\r\n                    ]\r\n                ],\r\n                passwordConfirm: [\r\n                    \"\", [\r\n                        Validators.required,\r\n                        Validators.minLength(6)\r\n                    ]\r\n                ],\r\n                displayName: [\"\", null]\r\n            },\r\n            {\r\n                validator: this.compareValidator('password', 'passwordConfirm')\r\n            }\r\n        );\r\n\r\n        if (!this.isRegister) {\r\n            this.userForm.addControl(\"passwordCurrent\",new FormControl(\"\", Validators.required));\r\n            var password = this.userForm.find(\"password\");\r\n            password.clearValidators();\r\n            password.setValidators(Validators.minLength(6));\r\n            var passwordConfirm = this.userForm.find(\"passwordConfirm\");\r\n            passwordConfirm.clearValidators();\r\n            passwordConfirm.setValidators(Validators.minLength(6));\r\n\r\n            this.authService.get().subscribe(\r\n                user => {\r\n                    this.userForm.find(\"username\").setValue(user.UserName);\r\n                    this.userForm.find(\"email\").setValue(user.Email);\r\n                    this.userForm.find(\"displayName\").setValue(user.DisplayName);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    compareValidator(fc1: string, fc2: string) {\r\n        return (group: FormGroup): { [key: string]: any } => {\r\n            let password = group.controls[fc1];\r\n            let passwordConfirm = group.controls[fc2];\r\n            if (password.value === passwordConfirm.value) {\r\n                return null;\r\n            }\r\n            return { compareFailed: true };\r\n        };\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.isRegister) {\r\n            this.authService.add(this.userForm.value)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        // registration successful\r\n                        this.errorMessage = null;\r\n                        this.authService.login(\r\n                            this.userForm.value.username,\r\n                            this.userForm.value.password)\r\n                            .subscribe((data) => {\r\n                                // login successful\r\n                                this.errorMessage = null;\r\n                                this.router.navigate([\"\"]);\r\n                            },\r\n                            (err) => {\r\n                                console.log(err);\r\n                                // login failure\r\n                                this.errorMessage =\r\n                                    \"Warning: Username or Password mismatch\";\r\n                            });\r\n                    } else {\r\n                        // registration failure\r\n                        this.errorMessage = data.error;\r\n                        console.log(this.errorMessage);\r\n                    }\r\n                },\r\n                (err) => {\r\n                    // server/connection error\r\n                    this.errorMessage = err;\r\n                    console.log(this.errorMessage);\r\n                });\r\n        } else {\r\n            let user = new User(\r\n                this.userForm.value.username,\r\n                this.userForm.value.password,\r\n                this.userForm.value.passwordNew,\r\n                this.userForm.value.email,\r\n                this.userForm.value.displayName);\r\n            this.authService.update(user)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        // update successful\r\n                        this.errorMessage = null;\r\n                        this.router.navigate([\"\"]);\r\n                    } else {\r\n                        // update failure\r\n                        this.errorMessage = data.error;\r\n                        console.log(this.errorMessage);\r\n                    }\r\n                },\r\n                (err) => {\r\n                    // server/connection error\r\n                    this.errorMessage = err;\r\n                    console.log(this.errorMessage);\r\n                });\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}